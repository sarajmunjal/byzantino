# -*- generated by 1.0.9 -*-
import da
PatternExpr_410 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.FreePattern('sender')])
PatternExpr_429 = da.pat.TuplePattern([da.pat.ConstantPattern('Get_configuration'), da.pat.FreePattern('client'), da.pat.FreePattern('client_name'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_495 = da.pat.TuplePattern([da.pat.ConstantPattern('Reconfiguration'), da.pat.FreePattern('sender'), da.pat.FreePattern('proof_of_misbehavior')])
PatternExpr_611 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])
PatternExpr_634 = da.pat.ConstantPattern('Shutdown')
PatternExpr_618 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])])
PatternExpr_638 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
_config_object = {}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
replica_module = da.import_da('replica')
from time import time
from config import *
import read_config

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_3 = []
        self._OlympusReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_410, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_409]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_429, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_428]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_495, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_494]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_611, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_634, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, name, num_replicas, all_replica_conf_failures, head_timeout, replica_timeout, **rest_660):
        super().setup(name=name, num_replicas=num_replicas, all_replica_conf_failures=all_replica_conf_failures, head_timeout=head_timeout, replica_timeout=replica_timeout, **rest_660)
        self._state.name = name
        self._state.num_replicas = num_replicas
        self._state.all_replica_conf_failures = all_replica_conf_failures
        self._state.head_timeout = head_timeout
        self._state.replica_timeout = replica_timeout
        self._state.replicas = list()
        self._state.replica_private_keys = list()
        self._state.replica_public_keys = list()
        self._state.head = None
        self._state.tail = None
        self._state.private_key = SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key.encode(encoder=HexEncoder)
        self._state.configuration_number = 0
        self._state.client_keys = {}
        all_replica_failures = self._state.all_replica_conf_failures.get(self._state.configuration_number, {})
        for i in range(self._state.num_replicas):
            replica_failures = all_replica_failures.get(i, {})
            if (i == 0):
                replica = self.new(replica_module.Replica, args=(i, 'Head', replica_failures, self._state.head_timeout, self._state.public_key))
                self._state.head = replica
            elif (i == (self._state.num_replicas - 1)):
                replica = self.new(replica_module.Replica, args=(i, 'Tail', replica_failures, self._state.replica_timeout, self._state.public_key))
                self._state.tail = replica
            else:
                replica = self.new(replica_module.Replica, args=(i, ('Replica ' + str(i)), replica_failures, self._state.replica_timeout, self._state.public_key))
            self._state.replicas.append(replica)
            replica_name = ('Replica ' + str(i))
            self.output_wrapper('Olympus created replica process: {}'.format(replica_name))
            signing_key = SigningKey.generate()
            verify_key = signing_key.verify_key.encode(encoder=HexEncoder)
            self.output_wrapper('Olympus created keys for replica process: {}. Public key: {}'.format(replica_name, str(verify_key)))
            self._state.replica_private_keys.append(signing_key)
            self._state.replica_public_keys.append(verify_key)

    def run(self):
        self._start(self._state.replicas)
        self.sign_and_send(('Configuration', self._id, self._state.replicas, self._state.head, self._state.tail, [self._state.replica_public_keys, self._state.configuration_number]), self._state.replicas)
        for i in range(len(self._state.replicas)):
            self.send(('Key', self._state.replica_private_keys[i]), to=self._state.replicas[i])
        super()._label('_st_label_608', block=False)
        _st_label_608 = 0
        while (_st_label_608 == 0):
            _st_label_608 += 1
            if PatternExpr_618.match_iter(self._OlympusReceivedEvent_3, SELF_ID=self._id):
                _st_label_608 += 1
            else:
                super()._label('_st_label_608', block=True)
                _st_label_608 -= 1
        super()._label('_st_label_631', block=False)
        _st_label_631 = 0
        while (_st_label_631 == 0):
            _st_label_631 += 1
            if PatternExpr_638.match_iter(self._OlympusReceivedEvent_4, SELF_ID=self._id):
                _st_label_631 += 1
            else:
                super()._label('_st_label_631', block=True)
                _st_label_631 -= 1

    def sign_and_send(self, data, to_):
        data = list(data)
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def verify_data_with_key(self, data, pub_key):
        try:
            pub_key.verify(data)
            return literal_eval(data.message.decode('utf-8'))
        except BadSignatureError:
            return None

    def output_wrapper(self, log):
        self.output('[{}][TS: {}]'.format(self._state.name, str(time())), log)

    def _Olympus_handler_409(self, sender):
        self.output_wrapper((('ACK from ' + str(sender)) + '.'))
    _Olympus_handler_409._labels = None
    _Olympus_handler_409._notlabels = None

    def _Olympus_handler_428(self, client, client_name, client_id, client_public_key):
        self._state.client_keys[client_id] = VerifyKey(client_public_key, encoder=HexEncoder)
        self.send(('Configuration', self._state.replicas, self._state.head), to=client)
        self.send(('Keys', self._state.replica_public_keys, self._state.public_key), to=client)
        self.send(('Client_keys', client_id, client_public_key), to=self._state.replicas)
        self.output_wrapper('Received public key: {} from client: {}'.format(str(client_public_key), str(client_name)))
        self.output_wrapper((('Configuration sent to ' + str(client_name)) + '.'))
    _Olympus_handler_428._labels = None
    _Olympus_handler_428._notlabels = None

    def _Olympus_handler_494(self, sender, proof_of_misbehavior):
        self.output_wrapper((('Reconfiguration request received from ' + str(sender)) + '.'))
        self.output_wrapper('No reconfiguration mechanism implemented yet.')
    _Olympus_handler_494._labels = None
    _Olympus_handler_494._notlabels = None
